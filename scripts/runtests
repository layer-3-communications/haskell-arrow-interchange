#!/bin/bash

# Outline of this application:
#
# * Make sure that diff and flatc are on the PATH
# * Find example-json-to-arrow
# * Test all examples in golden/input/ directory. First, we run
#   example-json-to-arrow to convert json to a binary format. Then,
#   we go back in the other directory with flatc. Finally, we compare
#   the json output of flatc with an expected output, failing if they
#   are not byte-for-byte identical.
#
# Go to the bottom of this file to see what tests are actually run.

if [[ "$#" -ne 0 ]]; then
  echo "This application does not expect arguments" >&2
  echo "Usage: runtests" >&2
  exit 1
fi

if hash diff; then
  echo "Found diff in PATH" >&2
  which diff >&2
else
  echo "Could not find flatc in PATH. Exiting." >&2
  exit 1
fi

if hash flatc; then
  echo "Found flatc in PATH" >&2
  which flatc >&2
else
  echo "Could not find flatc in PATH. Exiting." >&2
  exit 1
fi

mapfile msgapps < <(find . -executable -type f -name arrow-message-json-to-binary)

if [[ ${#msgapps[@]} -ne 1 ]]; then
  echo "Expected to find exactly one executable file name arrow-message-json-to-binary" >&2
  echo "Make sure that you have already run 'cabal build'." >&2
  exit 1
fi

# Get the first result and remove trailing whitespace
msgapp="${msgapps[0]%%[[:space:]]}"

if [[ -z $msgapp ]]; then
  echo "Path to arrow-message-json-to-binary was empty string. Exiting." >&2
  exit 1
fi

echo "Found arrow-message-json-to-binary at:" >&2
echo "$msgapp" >&2

mapfile footerapps < <(find . -executable -type f -name arrow-footer-json-to-binary)
if [[ ${#footerapps[@]} -ne 1 ]]; then
  echo "Expected to find exactly one executable file name arrow-footer-json-to-binary" >&2
  echo "Make sure that you have already run 'cabal build'." >&2
  exit 1
fi

# Get the first result and remove trailing whitespace
footerapp="${footerapps[0]%%[[:space:]]}"

if [[ -z $footerapp ]]; then
  echo "Path to arrow-footer-json-to-binary was empty string. Exiting." >&2
  exit 1
fi

echo "Found arrow-footer-json-to-binary at:" >&2
echo "$footerapp" >&2

# Test that flatc can decode the binary messages that this library produces
# Takes one argument: the name of the test without any file extension
runMessageTest() {
  if [[ "$#" -ne 1 ]]; then
    echo "runFooterTest must be called with one argument" >&2
    exit 1
  fi
  $msgapp "golden/input/$1.json" "golden/binout/$1.bin"
  flatc --json --strict-json -o golden/jsonout/ --raw-binary ./arrow-format/Message.fbs -- "golden/binout/$1.bin"
  if diff "golden/jsonout/$1.json" "golden/expected/$1.json" >/dev/null; then
    :
  else
    echo "Test $1: incorrect output"
    exit 1
  fi
}

# Test that flatc can decode the binary footers that this library produces
# Takes one argument: the name of the test without any file extension
runFooterTest() {
  if [[ "$#" -ne 1 ]]; then
    echo "runMessageTest must be called with one argument" >&2
    exit 1
  fi
  $footerapp "golden/input/$1.json" "golden/binout/$1.bin"
  flatc --json --strict-json -o golden/jsonout/ --raw-binary ./arrow-format/File.fbs -- "golden/binout/$1.bin"
  if diff "golden/jsonout/$1.json" "golden/expected/$1.json" >/dev/null; then
    :
  else
    echo "Test $1: incorrect output"
    exit 1
  fi
}

runMessageTest message-001
runMessageTest message-002
runMessageTest message-003
runMessageTest message-004

runFooterTest footer-001
runFooterTest footer-002
runFooterTest footer-003
